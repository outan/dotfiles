[core]
	excludesfile = ~/.gitignore
	quotepath    = false
	whitespace   =fix,-indent-with-non-tab,trailing-space,cr-at-eol
	pager        = "lv -c -Au8"
	attributesfile = ~/dotfiles/.gitattributes_global

[user]
	name         = outan
	email        = outannexway@gmail.com

[color]
	interactive  = auto
	grep         = auto
	ui           = true
	diff         = auto
	status       = auto
	branch       = auto

[color "branch"]
	current      = yellow reverse
	local        = yellow
	remote       = green

[color "diff"]
    meta         = yellow bold
    frag         = magenta bold
  	old          = red reverse
	new          = green reverse
    whitespace   = white reverse

[color "status"]
  	added        = yellow
    changed      = green
	untracked    = cyan reverse
	branch       = magenta

[alias]
    #log関連
    lgr     = log --walk-reflogs #-gと同様、reflogのすべての履歴の一覧を表示
    lgp      = log -p #パッチ形式のコミットログを表示する 
    lgs      = log --stat # 変更されたファイル名も一緒に出す
    lgg     = log --graph --all --decorate --date=short --pretty=format:'%Cgreen%h %C(yellow)%cd %C(Magenta)%ar %Cblue%cn %Creset%s %C(Red)%d'
    lgg2    = log --graph --all --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset)  %C(bold white)--%an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

    #diff関連
	df      = diff
	dc      = diff --cached
	ds      = diff --staged
    dw      = diff --color-words #単語単位で色付けてdiff
    dwd     = diff --word-diff
	d1      = diff HEAD~ # HEADから1つ前とdiff
    d2      = diff HEAD~~ # HEADから2つ前とdiff
    d3      = diff HEAD~~~ # HEADから3つ前とdiff
    d4      = diff HEAD~~~~ # HEADから4つ前とdiff
    d5      = diff HEAD~~~~~ # HEADから5つ前とdiff
    d10     = diff HEAD~~~~~~~~~~ # HEADから10前とdiff

    unstage  = reset HEAD
    co      = checkout
    cb      = checkout -b # branch切ってcheckoutする
    cd      = checkout develop
    ci      = commit
    cm      = commit -m

    #branch関連
	br      = branch -vv
    ba      = branch -avv
    bm      = branch --merged     # merge済みのbranchを表示
	bn      = branch --no-merged  # mergeしてないbranchを表示

	st      = status --ignore-submodules=dirty
	url     = config --get remote.origin.url
	pr      = pull --rebase
	rbm     = rebase master


	fo      = fetch origin
	ro      = rebase origin
	pp      = pull --prune  #削除されたリモートブランチはfetchするときにremote tracking branchを削除するために
	see     = browse
	s	    = stash
	ss	    = stash save
	cl	    = config --local -l
    ce	    = config --edit
	fix	    = commit --amend
    rso     = remote show origin
[push]
	#default = upstream
    #カレントブランチとリモートブランチの間に「追跡関係」がある場合、なおかつカレントブランチのみはpushの対象になるように設定(default = trackingとは同じ効果)
    default  = simple
#simple - like upstream, but refuses to push if the upstream branch's name is different from the local one. This is the safest option and is well-suited for beginners. It will become the default in Git 2.0.

[branch]
    autosetuprebase = always
	#autosetupmerge  = false   #git checkout やgit branchでtracking branchからローカルブランチを作成する時に、勝手に追跡しないようにする(.git/configに追跡情報を追記しない)ことにより、git pushでマッチがって他のブランチにpushしてしまうことを防ぐ

[merge]
    # from 1.7.6
    ff = false
    keepBackup = false
	tool = p4merge

[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
	keepTemporaries = false
    trustExitCode = false
    keepBackup = false

#[diff]
#     external = p4diff

[pull]
    # from 1.7.9
    rebase = true
