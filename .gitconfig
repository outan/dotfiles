[core]
    excludesfile = ~/.gitignore
    quotepath    = false
    whitespace   = trailing-space,space-before-tab,cr-at-eol
    attributesfile = ~/dotfiles/.gitattributes_global
    autocrlf     = input #Windows にチェックアウトした時の CRLF への変換は行いますが、Mac や Linux へのチェックアウト時は LF のままにします。(.git-completion.bashには関連の設定があるようですが、念のため.gitconfigにも設定しておく。)

[apply]
    whitespace = fix #delete  whitespce in the end of line, but only during patch, not "always automatically"

[user]
    name         = outan
    email        = outannexway@gmail.com

[color]
    interactive  = auto
    grep         = auto
    ui           = true

    diff         = auto
    status       = auto
    branch       = auto

[color "branch"]
    current      = yellow reverse
    local        = yellow
    remote       = green

[color "diff"]
    meta         = yellow bold
    frag         = magenta bold
    old          = red reverse
    new          = green reverse
    whitespace   = white reverse

[color "status"]
    added        = yellow
    changed      = green
    untracked    = cyan reverse
    branch       = magenta

[alias]
    #log関連
    lgr     = log --walk-reflogs #-gと同様、reflogのすべての履歴の一覧を表示
    lgp      = log -p #パッチ形式のコミットログを表示する 
    lgs      = log --stat # 変更されたファイル名も一緒に出す
    lgg     = log --graph --all --decorate --date=short --pretty=format:'%Cgreen%h %C(yellow)%cd %C(Magenta)%ar %Cblue%cn %Creset%s %C(Red)%d'
    lgg2    = log --graph --all --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset)  %C(bold white)--%an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

    #diff関連
    df      = diff
    dc      = diff --cached
    ds      = diff --staged
    dw      = diff --color-words #単語単位で色付けてdiff
    dwd     = diff --word-diff
    d1      = diff HEAD~ # HEADから1つ前とdiff
    d2      = diff HEAD~~ # HEADから2つ前とdiff
    d3      = diff HEAD~~~ # HEADから3つ前とdiff
    d4      = diff HEAD~~~~ # HEADから4つ前とdiff
    d5      = diff HEAD~~~~~ # HEADから5つ前とdiff
    d10     = diff HEAD~~~~~~~~~~ # HEADから10前とdiff

    unstage  = reset HEAD
    co      = checkout
    cb      = checkout -b # branch切ってcheckoutする
    cd      = checkout develop
    ci      = commit
    cm      = commit -m

    #branch関連
    br      = branch -vv
    ba      = branch -avv
    bm      = branch --merged     # currnetブランチにmerge済みのbranchの一覧を表示
    bnm     = branch -a --no-merged  # currentブランチにまだmergeしてないbranchの一覧(remote tracking branchも含める)を表示

    st      = status --ignore-submodules=dirty
    url     = config --get remote.origin.url
    pr      = pull --rebase
    rbm     = rebase master


    fo      = fetch origin
    ro      = rebase origin
    pp      = pull --prune  #削除されたリモートブランチはfetchするときにremote tracking branchを削除するために
    see     = browse
    s       = stash
    ss      = stash save
    cl      = config -l #repoではない場所で実行する場合はglobalの設定をそのまま表示させ、
                        #repo中で実行する場合はrepoの設定と衝突する場合はrepoの独自の設定を優先させる。
                        #git config --local -lはrepo中しか実行できなくて、repoの設定のみを表示させる)
    ce      = config --global --edit #repoではない場所でも実行可能(git config --editはrepo中のみ実行可能)
    fix     = commit --amend
    rso     = remote show origin
[push]
    # default = nothing #git pushの省略形が使えずに常にgit push origin masterみたいに指定しなければなりません。
    # default = upstream #旧名:tracking カレントブランチとリモートブランチの間に「追跡関係」があり、なおかつカレントブランチのみはpushの対象になる。
    default = simple #like upstream, but refuses to push if the upstream branch's name is different from the local one.
                     #This is the safest option and is well-suited for beginners. It will become the default in Git 2.0.
    # default = current #カレントブランチと同名のリモートブランチがあれば、カレントブランチをremoteにpush する。例えupstreamを設定していなくてもpushされるので、効率。

[branch]
    autosetuprebase = always
    #autosetupmerge  = false #git checkout やgit branchでtracking branchからローカルブランチを作成する時に、
    #勝手に追跡しないようにする(.git/configに追跡情報を追記しない)ことにより、git pushでマッチがって他のブランチにpushしてしまうことを防ぐ

[merge]
    ff = false  #「他のブランチで作業し、このブランチにマージした」という情報が失われることを防ぐために、
                #fast-forwardマージを無効にして、いつでもmergeコミットを強制的に作らせるように。
                #同時にgit pull rebaseを常に有効しないとpullの時にもfast-forwardマージができずに大量のマージコミットが作られてしまう。
    keepBackup = false
    tool = p4merge

[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

#[diff]
#     external = p4diff

[pull]
    rebase = true # git pullの時にfast-forwardマージができるように(fast-forwardマージができて、マージコミットが作らないように)。merge ff = falseの設定と同時に設定するべき。
    prune  = true

[fetch]
    prune = true
[init]
    templatedir = ~/dotfiles/git_template

[tig "bind"]
    generic = g move-first-line
    generic = G move-last-line
    generic = B view-refs      # Show branch view,view-branch has been renamed to view-refs
